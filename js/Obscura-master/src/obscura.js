// Generated by CoffeeScript 1.6.3
(function() {
  var obscura, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  obscura = function(img, target) {
    var fileRegExp,
      _this = this;
    if (target == null) {
      target = null;
    }
    /*
    internal variables
    */

    fileRegExp = /\.((jp(e)?g)|(png)|(gif))$/i;
    this.onLoad = function() {
      return true;
    };
    /*
    Set up local variables with image data from source
    */

    this.setUpImageData = function() {
      _this.dimensions = {
        w: _this.image.width,
        h: _this.image.height
      };
      _this.imageDimensions = _this.dimensions;
      _this.canvas.width = _this.canvas.height = _this.dimensions.w > _this.dimensions.h ? _this.dimensions.w * 2 : _this.dimensions.h * 2;
      return _this.load(0, 0, _this.image.width, _this.image.height, _this.image);
    };
    /*
    load image
    */

    this.load = function(x, y, w, h, image) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (w == null) {
        w = _this.image.width;
      }
      if (h == null) {
        h = _this.image.height;
      }
      if (image == null) {
        image = _this.target;
      }
      _this.context.globalCompositeOperation = "copy";
      _this.context.drawImage(image, 0, 0, _this.imageDimensions.w, _this.imageDimensions.h, x, y, w, h);
      _this.imageDimensions = {
        w: w,
        h: h
      };
      _this.render();
      return _this;
    };
    /*
    render edited image to target
    */

    this.render = function() {
      _this.target.width = _this.dimensions.w;
      _this.target.height = _this.dimensions.h;
      _this.target.getContext('2d').globalCompositeOperation = "copy";
      _this.target.getContext('2d').drawImage(_this.canvas, 0, 0);
      _this.context.clearRect(0, 0, _this.canvas.width, _this.canvas.height);
      return _this;
    };
    /*
    Convert image to base64 encoded string for saving to server
    */

    this.save = function() {
      return _this.target.toDataURL();
    };
    /*
    resizes an image
    */

    this.resize = function(scale, keepProportions, crop) {
      var currentDimensions, newScale;
      if (keepProportions == null) {
        keepProportions = true;
      }
      if (crop == null) {
        crop = false;
      }
      _this.context.save();
      if (Object.prototype.toString.call(scale) === '[object Array]') {
        scale = {
          w: scale[0],
          h: scale[1]
        };
      } else if (typeof scale !== 'object') {
        scale = {
          w: scale,
          h: scale
        };
      }
      scale.w = typeof scale.w === 'string' && scale.w.match(/%/) ? _this.dimensions.w * (parseFloat(scale.w) / 100) : parseFloat(scale.w);
      scale.h = typeof scale.h === 'string' && scale.h.match(/%/) ? _this.dimensions.h * (parseFloat(scale.h) / 100) : parseFloat(scale.h);
      currentDimensions = _this.dimensions;
      _this.dimensions = scale;
      newScale = scale;
      if (keepProportions) {
        if (scale.w > scale.h || (scale.w === scale.h && currentDimensions.w > currentDimensions.h)) {
          newScale.w = scale.w;
          newScale.h = (scale.w / currentDimensions.w) * currentDimensions.h;
        } else if (scale.h > scale.w || (scale.h === scale.w && currentDimensions.h > currentDimensions.w)) {
          newScale.w = (scale.h / currentDimensions.h) * currentDimensions.w;
          newScale.h = scale.h;
        }
        if (!crop) {
          _this.dimensions = newScale;
        }
      }
      _this.context.drawImage(_this.target, 0, 0, newScale.w, newScale.h);
      _this.render();
      _this.imageDimensions = _this.dimensions;
      _this.context.restore();
      return _this;
    };
    /*
    Crops an image
    */

    this.crop = function(x, y, w, h) {
      var size;
      _this.context.save();
      size = _this.dimensions;
      _this.dimensions = {
        w: w,
        h: h
      };
      _this.context.drawImage(_this.target, x, y, w, h, 0, 0, w, h);
      _this.imageDimensions = {
        w: w,
        h: h
      };
      _this.render();
      _this.context.restore();
      return _this;
    };
    /*
    Resizes an image to fit completely into a given space
    */

    this.fit = function(w, h) {
      _this.context.save();
      if (w > _this.canvas.width && h > _this.canvas.height) {
        return _this;
      }
      if (w < h || _this.imageDimensions.w > _this.imageDimensions.h || (w === h && _this.imageDimensions.h > _this.imageDimensions.w)) {
        h = (w / _this.imageDimensions.w) * _this.imageDimensions.h;
      } else if (h < w || _this.imageDimensions.h > _this.imageDimensions.w || (h === w && _this.imageDimensions.w > _this.imageDimensions.h)) {
        w = (h / _this.imageDimensions.h) * _this.imageDimensions.w;
      }
      _this.dimensions = {
        w: w,
        h: h
      };
      _this.context.drawImage(_this.target, 0, 0, w, h);
      _this.imageDimensions = _this.dimensions;
      _this.render();
      _this.context.restore();
      return _this;
    };
    /*
    Rotates an image
    */

    this.rotate = function(angle, center) {
      var ch, cw, h, quadrant, theta, w, x, x2, y, y2, _ref;
      if (center == null) {
        center = 'center';
      }
      _this.context.restore();
      _this.context.save();
      _ref = _this.dimensions, w = _ref.w, h = _ref.h;
      cw = w;
      ch = h;
      if (angle === 90 || angle === 270) {
        cw = h;
        ch = w;
      } else if (angle !== 180 && angle !== 360) {
        theta = angle % 90;
        quadrant = Math.floor(angle / 90);
        if (quadrant === 0 || quadrant === 2) {
          cw = w * Math.cos(theta * (Math.PI / 180)) + h * Math.sin(theta * (Math.PI / 180));
          ch = h * Math.cos(theta * (Math.PI / 180)) + w * Math.sin(theta * (Math.PI / 180));
        } else {
          ch = w * Math.cos(theta * (Math.PI / 180)) + h * Math.sin(theta * (Math.PI / 180));
          cw = h * Math.cos(theta * (Math.PI / 180)) + w * Math.sin(theta * (Math.PI / 180));
        }
      }
      _this.context.globalCompositeOperation = "copy";
      if (typeof center !== 'object') {
        if (center.match(/(top)/)) {
          y = 0;
          y2 = (ch - h) / 2;
        } else if (center.match(/(bottom)/)) {
          y = ch;
          y2 = ch - (ch - h) / 2;
        } else if (center.match(/(center)/)) {
          y = ch / 2;
          y2 = h / 2;
        }
        if (center.match(/(left)/)) {
          x = 0;
          x2 = (cw - w) / 2;
        } else if (center.match(/(middle)/)) {
          x = cw;
          x2 = cw - (cw - w) / 2;
        } else if (center.match(/(center)/)) {
          x = cw / 2;
          x2 = w / 2;
        }
      }
      _this.dimensions.w = cw;
      _this.dimensions.h = ch;
      _this.context.translate(x, y);
      _this.context.rotate(angle * Math.PI / 180);
      _this.context.clearRect(0, 0, _this.canvas.width, _this.canvas.height);
      _this.context.drawImage(_this.target, 0, 0, w, h, -x2, -y2, w, h);
      _this.context.translate(x, y);
      _this.imageDimensions = _this.dimensions;
      _this.context.restore();
      _this.render();
      return _this;
    };
    /*
    Flips an image
    */

    this.flip = function(direction) {
      if (direction == null) {
        direction = 'horizontal';
      }
      _this.context.save();
      if (direction === 'horizontal') {
        _this.context.translate(_this.dimensions.w, 0);
        _this.context.scale(-1, 1);
      } else {
        _this.context.translate(0, _this.dimensions.h);
        _this.context.scale(1, -1);
      }
      _this.context.drawImage(_this.target, 0, 0);
      _this.context.restore();
      _this.render();
      return _this;
    };
    /*
    Reflection
    */

    this.reflect = function(alphaStart, gap, reflectionAmount, direction) {
      var alpha, alphaStep, col, currentDimensions, gradientCanvas, gradientContext, h, opacity, reflectionImageData, row, startPos, targetPos, w, _ref;
      if (alphaStart == null) {
        alphaStart = 0.5;
      }
      if (gap == null) {
        gap = 0;
      }
      if (reflectionAmount == null) {
        reflectionAmount = 0.25;
      }
      if (direction == null) {
        direction = 'vertical';
      }
      _this.context.save();
      gradientCanvas = document.createElement('canvas');
      gradientCanvas.width = _this.imageDimensions.w;
      gradientCanvas.height = _this.imageDimensions.h;
      gradientContext = gradientCanvas.getContext('2d');
      _this.context.globalCompositeOperation = 'source-over';
      startPos = {
        x: 0,
        y: 0
      };
      targetPos = {
        x: 0,
        y: 0
      };
      currentDimensions = JSON.parse(JSON.stringify(_this.imageDimensions));
      _ref = _this.imageDimensions, w = _ref.w, h = _ref.h;
      _this.context.drawImage(_this.target, 0, 0);
      if (direction === 'vertical') {
        h = _this.imageDimensions.h * reflectionAmount;
        _this.dimensions.h = _this.imageDimensions.h + gap + h;
        gradientContext.translate(0, h);
        gradientContext.scale(1, -1);
        _this.context.translate(0, h);
        _this.context.scale(1, -1);
        targetPos.y = _this.dimensions.h;
        startPos.y = currentDimensions.h - h;
      }
      w = Math.floor(w);
      h = Math.floor(h);
      gradientContext.drawImage(_this.target, startPos.x, startPos.y, w, h, 0, 0, w, h);
      reflectionImageData = gradientContext.getImageData(0, 0, w, h);
      opacity = 1;
      col = 1;
      row = 1;
      alphaStep = (255 * alphaStart) / h;
      while (!(row > h)) {
        while (!(col > w)) {
          alpha = reflectionImageData.data[((row * (w * 4)) + (col * 4)) + 3];
          alpha = Math.min(alpha, (h - (row - 1)) * alphaStep);
          reflectionImageData.data[((row * (w * 4)) + (col * 4)) + 3] = alpha;
          col++;
        }
        col = 1;
        row++;
      }
      _this.context.putImageData(reflectionImageData, 0, currentDimensions.h);
      _this.imageDimensions = _this.dimensions;
      _this.render();
      _this.context.restore();
      return _this;
    };
    this.target = target !== null ? document.querySelector(target) : document.createElement('canvas');
    this.canvas = document.createElement('canvas');
    this.context = this.canvas.getContext('2d');
    if (img.match(fileRegExp)) {
      this.image = new Image();
      this.image.onload = function() {
        _this.setUpImageData();
        return _this.onLoad();
      };
      this.image.src = img;
    } else {
      this.image = document.querySelector(img);
      this.setUpImageData();
    }
    return this;
  };

  root.obscura = obscura;

}).call(this);
